#tag ClassProtected Class gzipExceptionInherits IOException	#tag Method, Flags = &h1021		Private Sub Constructor(errorcode as Integer, message as String)		  self.ErrorNumber = errorcode		  self.Message = message		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function gzipErrorMessage(errcode as Integer) As String		  soft declare function zError lib zlibPath (errnum as Integer) as Ptr		  		  dim m as MemoryBlock = zError(errcode)		  if m <> nil then		    return DefineEncoding(m.CString(0), Encodings.ASCII)		  else		    return ""		  end if		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Function libcErrorCode() As Integer		  #if TargetMacOS		    soft declare function libcErrorCode lib LibraryPath alias "__error" () as Ptr		  #endif		  #if TargetLinux		    soft declare function libcErrorCode lib LibraryPath alias "__errno_location" () as Ptr		  #endif		  #if TargetWin32		    soft declare function winErrorCode lib LibraryPath alias "_get_errno" (ByRef pValue as Integer) as Integer		  #endif		  		  #if TargetMacOS or TargetLinux		    dim m as MemoryBlock = libcErrorCode()		    If m is nil then		      //something bad has happened		      Return -1		    End if		    Return m.Long(0)		  #endif		  		  #if TargetWin32		    dim theErrorCode as Integer = 0		    dim winErrorCodeResult as Integer = winErrorCode(theErrorCode)		    if winErrorCodeResult = 0 then		      Return theErrorCode		    Else		      Return winErrorCodeResult		    End if		  #endif		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Shared Function libcErrorMessage(errcode as Integer) As String		  soft declare function strerror Lib LibraryPath (errcode as Integer)  as Ptr		  		  dim errorMsg as MemoryBlock = strerror(errcode)		  if errorMsg <> nil then		    return DefineEncoding(errorMsg.CString(0), Encodings.SystemDefault)		  else		    //something bad has happened		    return ""		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub RaiseError(gziperrorcode as Integer)		  if gziperrorcode = ERRNO then		    RaiselibcError(libcErrorCode)		  else		    RaiseGzipError(gziperrorcode)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub RaisegzipError(errorcode as Integer)		  if errorcode >= 0 then		    return		  end if		  		  raise new GZipException(errorcode, gzipErrorMessage(errorcode))		End Sub	#tag EndMethod	#tag Method, Flags = &h0		 Shared Sub RaiselibcError(errorcode as Integer)		  raise new GZipException(errorcode, libcErrorMessage(errorcode))		End Sub	#tag EndMethod	#tag Constant, Name = BUF_ERROR, Type = Double, Dynamic = False, Default = \"-5", Scope = Public	#tag EndConstant	#tag Constant, Name = DATA_ERROR, Type = Double, Dynamic = False, Default = \"-3", Scope = Public	#tag EndConstant	#tag Constant, Name = ERRNO, Type = Double, Dynamic = False, Default = \"-1", Scope = Public	#tag EndConstant	#tag Constant, Name = LibraryPath, Type = String, Dynamic = False, Default = \"", Scope = Private		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"/usr/lib/nptl/libc.so"		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"System.framework"	#tag EndConstant	#tag Constant, Name = MEM_ERROR, Type = Double, Dynamic = False, Default = \"-4", Scope = Public	#tag EndConstant	#tag Constant, Name = NEED_DICT, Type = Double, Dynamic = False, Default = \"2", Scope = Private	#tag EndConstant	#tag Constant, Name = OK, Type = Double, Dynamic = False, Default = \"0", Scope = Private	#tag EndConstant	#tag Constant, Name = STREAM_END, Type = Double, Dynamic = False, Default = \"1", Scope = Private	#tag EndConstant	#tag Constant, Name = STREAM_ERROR, Type = Double, Dynamic = False, Default = \"-2", Scope = Public	#tag EndConstant	#tag Constant, Name = VERSION_ERROR, Type = Double, Dynamic = False, Default = \"-6", Scope = Public	#tag EndConstant	#tag Constant, Name = zlibPath, Type = String, Dynamic = False, Default = \"", Scope = Private		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"/usr/lib/libz.dylib"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"ZLIB1.DLL"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"/usr/lib/libz.so.1"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="ErrorNumber"			Group="Behavior"			InitialValue="0"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Message"			Group="Behavior"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="RuntimeException"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="RuntimeException"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass